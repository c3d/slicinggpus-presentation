// ****************************************************************************
//
//   Diagram illustrating graphics APIs down to the graphics card
//
// ****************************************************************************



// ============================================================================
//
//   Configurable parameters
//
// ============================================================================

// Visibility settings
show_API N      -> interpolate 5%, N, show_API
show_app N      -> interpolate 5%, N, show_app
show_cables N   -> interpolate 5%, N, show_cables
show_network N  -> interpolate 5%, N, show_network
show_devices N  -> interpolate 5%, N, show_devices
show_virt N     -> interpolate 5%, N, show_virt
show_spice N    -> interpolate 5%, N, show_spice
show_stream N   -> interpolate 5%, N, show_stream
show_VMs N      -> interpolate 5%, N, show_VMs
show_host_GPU N -> interpolate 5%, N, show_host_GPU
show_passthru N -> interpolate 5%, N, show_passthru
show_slow N     -> interpolate 5%, N, show_slow
show_VGA N      -> interpolate 5%, N, show_VGA
show_VGPU N     -> interpolate 5%, N, show_VGPU
show_PGPU N     -> interpolate 5%, N, show_PGPU

show_API        -> 0.0
show_app        -> 0.0
show_cables     -> 0.0
show_network    -> 0.0
show_devices    -> 0.0
show_virt       -> 0.0
show_spice      -> 0.0
show_stream     -> 0.0
show_VMs        -> 0.0
show_host_GPU   -> 0.0
show_passthru   -> 0.0
show_slow       -> 0.0
show_VGA        -> 0.0
show_VGPU       -> 0.0
show_PGPU       -> 0.0

// Text parameters
guest_kernel N  -> guest_kernel := N
guest_GPU N     -> guest_GPU := N
guest_chipset N -> guest_chipset := N
guest_graphics N-> guest_graphics := N
guest_manager N -> guest_manager := N
protocol_color N-> protocol_color := N
host_kernel N   -> host_kernel := N
host_GPU N      -> host_GPU := N
host_chipset N  -> host_chipset := N

guest_kernel    -> "Guest kernel"
guest_GPU       -> "Guest Driver"
guest_chipset   -> "Chipset drivers"
guest_graphics  -> "Graphics API"
guest_manager   -> "Window manager"
protocol_color  -> "#48C"
host_kernel     -> "Host kernel"
host_GPU        -> "GPU Driver"
host_chipset    -> "Chipset drivers"



// ============================================================================
//
//   Adjustments for the pages we use
//
// ============================================================================

graphics_api_adjust "Base" ->
// ----------------------------------------------------------------------------
//   Adjust for smple box diagram
// ----------------------------------------------------------------------------
    show_API            0
    show_app            0
    show_cables         0
    show_network        0
    show_devices        0
    show_virt           0
    show_spice          0
    show_stream         0
    show_VMs            0
    show_host_GPU       0
    show_passthru       0
    show_slow           0
    show_VGA            0
    show_VGPU           0
    show_PGPU           0
    guest_kernel        "Kernel"
    guest_GPU           "GPU driver"
    guest_chipset       "Chipset drivers"
    guest_graphics      "Graphics API"
    guest_manager       "Window manager"
    host_kernel         "Kernel"
    host_GPU            "GPU driver"
    host_chipset        "Chipset drivers"


graphics_api_adjust "Dataflow" ->
// ----------------------------------------------------------------------------
//   Adjust for API data flow illustration
// ----------------------------------------------------------------------------
    show_API            1
    show_app            1
    show_cables         1
    show_network        0
    show_devices        1
    show_virt           0
    show_spice          0
    show_stream         0
    show_VMs            0
    show_host_GPU       0
    show_passthru       0
    show_slow           0
    show_VGA            0
    show_VGPU           0
    show_PGPU           0
    guest_kernel        "Kernel"
    guest_GPU           "GPU driver"
    guest_chipset       "Chipset drivers"
    guest_graphics      "Graphics API"
    guest_manager       "Window manager"
    host_kernel         "Kernel"
    host_GPU            "GPU driver"
    host_chipset        "Chipset drivers"
    color_legend        0, "cyan", "Graphic commands"
    color_legend        1, "#36B600", "Physical graphic bistreams"


graphics_api_adjust "Emulation" ->
// ----------------------------------------------------------------------------
//   Adjust for full emulation with VGA device
// ----------------------------------------------------------------------------
    show_API            1
    show_app            1
    show_cables         1
    show_network        0
    show_devices        1
    show_virt           1
    show_spice          0
    show_stream         0
    show_VMs            0
    show_host_GPU       1
    show_passthru       0
    show_slow           1
    show_VGA            1
    show_VGPU           0
    show_PGPU           0
    guest_kernel        "Guest kernel"
    guest_GPU           "VGA-class driver"
    guest_chipset       "Chipset drivers"
    guest_graphics      "Graphics API"
    guest_manager       "Window manager"
    host_kernel         "Host kernel"
    host_GPU            "GPU driver"
    host_chipset        "Chipset drivers"
    protocol_color      "blue"
    color_legend        0, "cyan", "Graphic commands"
    color_legend        1, "#36B600", "Physical graphic bistreams"
    color_legend        2, protocol_color, "VGA screen buffer data"


graphics_api_adjust "Emulation+VMs" ->
// ----------------------------------------------------------------------------
//   Adjust for full emulation with many VMs
// ----------------------------------------------------------------------------
    show_API            1
    show_app            1
    show_cables         1
    show_network        0
    show_devices        1
    show_virt           1
    show_spice          0
    show_stream         0
    show_VMs            1
    show_host_GPU       1
    show_passthru       0
    show_slow           1
    show_VGA            1
    show_VGPU           0
    show_PGPU           0
    guest_kernel        "Guest kernel"
    guest_GPU           "VGA-class driver"
    guest_chipset       "Chipset drivers"
    guest_graphics      "Graphics API"
    guest_manager       "Window manager"
    host_kernel         "Host kernel"
    host_GPU            "GPU driver"
    host_chipset        "Chipset drivers"
    protocol_color      "blue"
    color_legend        0, "cyan", "Graphic commands"
    color_legend        1, "#36B600", "Physical graphic bistreams"
    color_legend        2, protocol_color, "VGA screen buffer data"


graphics_api_adjust "Paravirt" ->
// ----------------------------------------------------------------------------
//   Adjust for paravirtualized case
// ----------------------------------------------------------------------------
    show_API            1
    show_app            1
    show_cables         1
    show_network        0
    show_devices        1
    show_virt           1
    show_spice          0
    show_stream         0
    show_VMs            0
    show_host_GPU       1
    show_passthru       0
    show_slow           0
    show_VGA            0
    show_VGPU           1
    show_PGPU           0
    guest_kernel        "Guest kernel"
    guest_GPU           "VirtIO-GPU"
    guest_chipset       "Chipset drivers"
    guest_graphics      "Graphics API"
    guest_manager       "Window manager"
    host_kernel         "Host kernel"
    host_GPU            "GPU driver"
    host_chipset        "Chipset drivers"
    protocol_color      "yellow"
    color_legend        0, "cyan", "Graphic commands"
    color_legend        1, "#36B600", "Physical graphic bistreams"
    color_legend        2, protocol_color, "Paravirtualized commands"


graphics_api_adjust "Paravirt+VMs" ->
// ----------------------------------------------------------------------------
//   Adjust for paravirtualized case
// ----------------------------------------------------------------------------
    show_API            1
    show_app            1
    show_cables         1
    show_network        0
    show_devices        1
    show_virt           1
    show_spice          0
    show_stream         0
    show_VMs            1
    show_host_GPU       1
    show_passthru       0
    show_slow           0
    show_VGA            0
    show_VGPU           1
    show_PGPU           0
    guest_kernel        "Guest kernel"
    guest_GPU           "VirtIO-GPU"
    guest_chipset       "Chipset drivers"
    guest_graphics      "Graphics API"
    guest_manager       "Window manager"
    host_kernel         "Host kernel"
    host_GPU            "GPU driver"
    host_chipset        "Chipset drivers"
    protocol_color      "yellow"
    color_legend        0, "cyan", "Graphic commands"
    color_legend        1, "#36B600", "Physical graphic bistreams"
    color_legend        2, protocol_color, "Paravirtualized commands"


graphics_api_adjust "Passthru" ->
// ----------------------------------------------------------------------------
//   Adjust for pass-thru case
// ----------------------------------------------------------------------------
    show_API            1
    show_app            1
    show_cables         1
    show_network        0
    show_devices        1
    show_virt           1
    show_spice          0
    show_stream         0
    show_VMs            0
    show_host_GPU       0
    show_passthru       1
    show_slow           0
    show_VGA            0
    show_VGPU           0
    show_PGPU           1
    guest_kernel        "Guest kernel"
    guest_GPU           "Vendor driver"
    guest_chipset       "Chipset drivers"
    guest_graphics      "Graphics API"
    guest_manager       "Window manager"
    host_kernel         "Host kernel (VT-d)"
    host_GPU            "GPU driver"
    host_chipset        "IOMMU + pci-stub"
    protocol_color      "lightgreen"
    color_legend        0, "cyan", "Graphic commands"
    color_legend        1, "#36B600", "Physical graphic bistreams"
    color_legend        2, protocol_color, "Vendor-specific commands"


graphics_api_adjust "vGPU" ->
// ----------------------------------------------------------------------------
//   Adjust for pass-thru case
// ----------------------------------------------------------------------------
    show_API            1
    show_app            1
    show_cables         1
    show_network        0
    show_devices        1
    show_virt           1
    show_spice          0
    show_stream         0
    show_VMs            0
    show_host_GPU       20%
    show_passthru       1
    show_slow           0
    show_VGA            0
    show_VGPU           0
    show_PGPU           1
    guest_kernel        "Guest kernel"
    guest_GPU           "Vendor driver"
    guest_chipset       "Chipset drivers"
    guest_graphics      "Graphics API"
    guest_manager       "Window manager"
    host_kernel         "Host kernel (VT-d)"
    host_GPU            "Vendor driver"
    host_chipset        "VFIO + mdev"
    protocol_color      "lightgreen"
    color_legend        0, "cyan", "Graphic commands"
    color_legend        1, "#36B600", "Physical graphic bistreams"
    color_legend        2, protocol_color, "Vendor-specific commands"


graphics_api_adjust "vGPU+VMs" ->
// ----------------------------------------------------------------------------
//   Adjust for pass-thru case
// ----------------------------------------------------------------------------
    show_API            1
    show_app            1
    show_cables         1
    show_network        0
    show_devices        1
    show_virt           1
    show_spice          0
    show_stream         0
    show_VMs            1
    show_host_GPU       20%
    show_passthru       0
    show_slow           0
    show_VGA            0
    show_VGPU           0
    show_PGPU           1
    guest_kernel        "Guest kernel"
    guest_GPU           "Vendor driver"
    guest_chipset       "Chipset drivers"
    guest_graphics      "Graphics API"
    guest_manager       "Window manager"
    host_kernel         "Host kernel (VT-d)"
    host_GPU            "Vendor driver"
    host_chipset        "VFIO + mdev"
    protocol_color      "lightgreen"
    color_legend        0, "cyan", "Graphic commands"
    color_legend        1, "#36B600", "Physical graphic bistreams"
    color_legend        2, protocol_color, "Vendor-specific commands"


graphics_api_adjust "GuestRemote" ->
// ----------------------------------------------------------------------------
//   Adjust for pass-thru case
// ----------------------------------------------------------------------------
    show_API            1
    show_app            1
    show_cables         0
    show_network        1
    show_devices        0
    show_virt           1
    show_spice          0
    show_stream         0
    show_VMs            0
    show_host_GPU       1
    show_passthru       0
    show_slow           0
    show_VGA            0
    show_VGPU           0
    show_PGPU           0
    guest_kernel        "Guest kernel"
    guest_GPU           "Network driver"
    guest_chipset       "Guest chipset"
    guest_graphics      "Networked Graphics"
    guest_manager      "Networked Manager"
    host_kernel         "Host kernel"
    host_GPU            "Network driver"
    host_chipset        "Host chipset"
    protocol_color      "orange"
    color_legend        0, "cyan", "Graphic commands"
    color_legend        1, protocol_color, "Network graphics stream"


graphics_api_adjust "HostRemote" ->
// ----------------------------------------------------------------------------
//   Adjust for pass-thru case
// ----------------------------------------------------------------------------
    show_API            1
    show_app            1
    show_cables         0
    show_network        1
    show_devices        0
    show_virt           1
    show_spice          1
    show_stream         0
    show_VMs            0
    show_host_GPU       1
    show_passthru       0
    show_slow           0
    show_VGA            0
    show_VGPU           0
    show_PGPU           0
    guest_kernel        "Guest kernel"
    guest_GPU           "VirtIO / QXL driver (QXL)"
    guest_chipset       "Guest chipset"
    guest_graphics      "Graphics API"
    guest_manager       "Window manager"
    host_kernel         "Host OS"
    host_GPU            "Network driver"
    host_chipset        "Host chipset"
    protocol_color      "#F8F"
    color_legend        0, "cyan", "Graphic commands"
    color_legend        1, protocol_color, "SPICE protocol"


graphics_api_adjust "GuestStreaming" ->
// ----------------------------------------------------------------------------
//   Adjust for pass-thru case
// ----------------------------------------------------------------------------
    show_API            1
    show_app            1
    show_cables         0
    show_network        1
    show_devices        0
    show_virt           1
    show_spice          1
    show_stream         1
    show_VMs            0
    show_host_GPU       1
    show_passthru       1
    show_slow           0
    show_VGA            0
    show_VGPU           0
    show_PGPU           1
    guest_kernel        "Guest kernel"
    guest_GPU           "virtio-serial (vsock?)"
    guest_chipset       "Vendor GPU driver"
    guest_graphics      "Streaming Agent"
    guest_manager       "Graphics API"
    host_kernel         "Host OS"
    host_GPU            "Network driver"
    host_chipset        "(Vendor GPU driver)"
    protocol_color      "yellow"
    color_legend        0, "cyan", "Graphic commands"
    color_legend        1, "lightgreen", "Vendor-specific commands"
    color_legend        2, protocol_color, "H264 stream"


graphics_api_adjust "HostStreaming" ->
// ----------------------------------------------------------------------------
//   Adjust for pass-thru case
// ----------------------------------------------------------------------------
    show_API            1
    show_app            1
    show_cables         0
    show_network        1
    show_devices        0
    show_virt           1
    show_spice          1
    show_stream         2
    show_VMs            0
    show_host_GPU       1
    show_passthru       1
    show_slow           0
    show_VGA            0
    show_VGPU           0
    show_PGPU           1
    guest_kernel        "Guest kernel"
    guest_GPU           "virtio-serial (vsock?)"
    guest_chipset       "Vendor GPU driver"
    guest_graphics      "Streaming Agent"
    guest_manager       "Graphics API"
    host_kernel         "Host OS"
    host_GPU            "Network driver"
    host_chipset        "(Vendor GPU driver)"
    protocol_color      "yellow"
    color_legend        0, "cyan", "Graphic commands"
    color_legend        1, "lightgreen", "Vendor-specific commands"
    color_legend        2, protocol_color, "H26 stream"


graphics_api_adjust Text:text ->
// ----------------------------------------------------------------------------
//   Fallback adjustment if not found
// ----------------------------------------------------------------------------
    graphics_api_mark "pink", Text



// ============================================================================
//
//   Graphics themselves
//
// ============================================================================

graphics_api Name ->
// ----------------------------------------------------------------------------
//   High-level description of the graphics API to be put in a slide
// ----------------------------------------------------------------------------
    stepping
    picture
        graphics_api_picture Name


graphics_api_picture Name ->
// ----------------------------------------------------------------------------
//    Drawing the graphics API
// ----------------------------------------------------------------------------
    graphics_api_adjust Name

    scale 80%
    translate_y -60 * show_spice
    locally
        color "white", show_devices + show_network - show_stream
        image -210, -210, 60%, 60%, "rampage.png"
        color "white", show_devices * 99%
        image  700, -280, 50%, 50%, "NEC Display.png"
        color "white", show_devices + show_stream
        image  graphics_api_x, -300, 20%, 20%, "NVIDIA Tesla P4Card.png"
        color "white", show_network * 99%
        image  700, -293, 26%, 26%, "Laptop.png"
        image  200, -300, 20%, 20%, "NetworkCard.png"

    if show_spice > 1% then locally
        show show_spice
        diagram_box "#038", 0, 60, 1000, 150 * show_spice, "QEMU"
        diagram_box "#25A", 200, 35, 350, 60 * show_spice, "SPICE Server"
    locally
        show show_virt
        diagram_box "#A02", 0, -100, 1000, 150 * show_virt, host_kernel
        diagram_box "#B42", -200, -125, 350, 60, host_chipset
        show show_host_GPU
        diagram_box "#B42", 200, -125, 350, 60, host_GPU

    // Depending on the step we are in, draw either one or three OS images
    graphics_api_system
    graphics_api_cables
    graphics_api_screen


graphics_api_system ->
// ----------------------------------------------------------------------------
//    Show the system (OS + VMs)
// ----------------------------------------------------------------------------
    locally
        if show_VMs > 1% then
            graphics_api_VMs show_VMs
        else
            graphics_api_OS
            show 99%
            graphics_api_app


graphics_api_app_texture ->
// ----------------------------------------------------------------------------
//   Texture used to represent a 3D workload (a few rotating colored spheres)
// ----------------------------------------------------------------------------
    rotate_time ->
        if show_slow > 0.5 then
            0.05 * integer (time * 3)
        else
            time
    frame_texture 200, 100,
        background_color "black", 20%
        light 0
        light_position 300, 300, 300
        rotate_x 40
        for I in 1..7 loop
            locally
                rotate_y (20 + 1.3 * I^3) * rotate_time
                translate_z 10 + 6 * I
                color_hsv 80 * I + 12 * rotate_time, 60%, 100%
                sphere 30 - 2 * I * sin(0.7 * I + rotate_time)
    color "white", 99%
    show show_app


graphics_outline_color C, Body ->
// ----------------------------------------------------------------------------
//   Outline an arrow with the given color
// ----------------------------------------------------------------------------
    locally
        do Body
    locally
        color "transparent"
        line_color C
        line_width 4
        texture ""
        do Body


graphics_api_virt_offset -> 120 * show_virt + 160 * show_spice
graphics_api_x -> 200 - 400 * fade_at(show_stream, 1)

graphics_api_app ->
// ----------------------------------------------------------------------------
//   Illustrates how data propagates along the API chain
// ----------------------------------------------------------------------------
    if show_app > 1% then locally
        graphics_api_app_texture
        locally
            ellipse graphics_api_x, 260 + graphics_api_virt_offset, 200, 100
            locally
                translate graphics_api_x, 80 + graphics_api_virt_offset, 15
                rotate_z -90
                graphics_outline_color "cyan",
                    // Application to Graphics API
                    arrow -80, 0, 100, 100, 44, 0.52
                    // Graphics API to guest driver
                    show 1-show_network * (1-show_spice)
                    arrow  90, 0, 100, 100, 44, 0.52
                graphics_outline_color protocol_color,
                    // Graphics API to guest driver, network case
                    show show_network * (1-show_spice)
                    arrow  90, 0, 100, 100, 44, 0.52
                graphics_outline_color protocol_color,
                    // Guest driver to either host driver or card
                    translate_x 250
                    scale show_virt * (1 - show_passthru)
                    arrow 0, 0, 100, 100, 44, 0.52
                graphics_outline_color "lightgreen",
                    // Guess pass-thru (from guest to host driver)
                    translate_x 250 + 75 * show_passthru
                    scale show_passthru
                    arrow 0, 0, 100 + 150 * show_passthru, 100, 44, 0.52
                graphics_outline_color protocol_color,
                    // SPICE server to network driver
                    translate_x 400
                    scale show_spice * (1 - show_passthru)
                    arrow 0, 0, 100, 100, 44, 0.52


        if show_stream > 1% then locally
            show 99% * fade_at(show_stream, 1)
            translate_y graphics_api_virt_offset
            locally
                translate_y -300 * fade_at(show_stream, 2)
                rotate_z 45 * fade_at(show_stream, 1)
                scale fade_at(show_stream, 1)
                graphics_outline_color "yellow",
                    double_arrow 0, 0, 200, 100, 44, 0.52
            locally
                translate_x 200
                rotate_z -90
                graphics_outline_color protocol_color,
                    arrow 320, 0, 100, 100, 44, 0.52
                scale show_stream
                graphics_outline_color "yellow",
                    show fade_out_at(show_stream, 2)
                    arrow 160, 0, 100, 100, 44, 0.52
                    arrow   0, 0, 100, 100, 44, 0.52


graphics_api_cables ->
// ----------------------------------------------------------------------------
//   Show how the data propagates along the physical chain
// ----------------------------------------------------------------------------
    if show_cables > 1% then
        locally
            graphics_api_app_texture
            show show_cables
            graphics_outline_color "#36B600",
                arrow -50, -270, 250, 100, 44, 0.52
                arrow 450, -270, 250, 100, 44, 0.52
                rectangle -250, -270, 150, 140
    if show_network > 1% then
        locally
            graphics_api_app_texture
            show show_network
            graphics_outline_color protocol_color,
                arrow 450, -270, 250, 80, 44, 0.52
                show fade_out_at(show_stream, 1)
                arrow -50, -270, 250, 80, 44, 0.52
                rectangle -250, -270, 150, 140


graphics_api_OS ->
// ----------------------------------------------------------------------------
//   Image of an operating system (either standalone or running in a VM)
// ----------------------------------------------------------------------------
    locally
        translate_y graphics_api_virt_offset
        show 100% - 30% * show_virt
        diagram_box "#298", 0, 260, 1000, 150, "Application"
        diagram_box "#038", 0, 100, 1000, 150, "User-space Graphics"
        diagram_box "#A02", 0, -60, 1000, 150, guest_kernel

        translate_z 30
        diagram_box "#25A", -200, 80, 350, 60, guest_manager
        diagram_box "#B42", -200, -85, 350, 60, guest_chipset
        diagram_box "#25A", 200, 80, 350, 60, guest_graphics
        diagram_box "#B42", 200, -85, 350, 60, guest_GPU

        translate_z 50
        color "white", show_API
        image 2.15 * graphics_api_x,  60, 15%, 15%, "DirectX12.png"
        image 2.15 * graphics_api_x, 110, 10%, 10%, "vulkan.png"
        image 2.15 * graphics_api_x, 150, 10%, 10%, "opengl.png"

        color "white", show_virt
        image -420, -140, 15%, 15%, "Intel CPU.png"
        image -300, -140, 12%, 12%, "Motherboard.png"
        color "white", show_VGA
        image  300, -140, 42%, 42%, "OldATICard.png"
        color "white", show_network
        image  300, -140, 12%, 12%, "NetworkCard.png"
        color "white", show_VGPU
        image  300, -140, 30%, 30%, "Virtual GPU.png"
        color "white", show_PGPU
        image  100 + graphics_api_x, -140, 10%, 10%, "NVIDIA Tesla P4Card.png"


graphics_api_VMs S:real ->
// ----------------------------------------------------------------------------
//   Draw a VM by drawing several operating system images
// ----------------------------------------------------------------------------
    locally
        translate -400, 55 * S, 0
        rotate_y -35 * S
        scale 100% - 25% * S
        translate 400, 0, -800 * S
        locally
            scale S * S
            graphics_api_OS
        translate_z 400 * S
        locally
            scale S
            graphics_api_OS
        translate_z 400 * S
        graphics_api_OS
        show 99%
        graphics_api_app


graphics_api_screen ->
// ----------------------------------------------------------------------------
//   Draw the screen with the application textures
// ----------------------------------------------------------------------------
    locally
        if show_VMs < 1% then
            graphics_api_app_texture
            rectangle 700, -260, 280, 160
        else
            graphics_vm_texture 0 -> color "white", show_VMs; texture "vt-d.png"
            graphics_vm_texture 1 -> color "white", show_VMs; texture "Civilization.jpg"
            graphics_vm_texture 2 -> graphics_api_app_texture
            for I in 0..2 loop
                graphics_vm_texture I
                rectangle 700 - (30 - 25*I) * show_VMs, -260 + (30 - 25*I) * show_VMs, 280 - 60*show_VMs, 160 - 60*show_VMs
                texture ""
                color "transparent"
                line_color_hsv 50 * I, 80%, 80%, show_VMs
                line_width 4
                rectangle 700 - (30 - 25*I) * show_VMs, -260 + (30 - 25*I) * show_VMs, 280 - 60*show_VMs, 160 - 60*show_VMs


graphics_api_mark Color:text, Mark:text ->
// ----------------------------------------------------------------------------
//   A highlight mark, e.g. "Slow!"
// ----------------------------------------------------------------------------
    picture
        translate 500, 500, 50
        rotate_z 20
        scale 4 + sin(1.5*time)^4
        color Color, 50%
        line_color Color
        font "Impact", 30
        text Mark


color_legend Index, Color, Body ->
// ----------------------------------------------------------------------------
//   Show a color legend
// ----------------------------------------------------------------------------
    text_box -500, -380 + 60 * Index, 500, 80,
        style "comp"
        color Color
        rectangle 0, 10, 40, 40
        color "#444"
        text "  "
        render Body
